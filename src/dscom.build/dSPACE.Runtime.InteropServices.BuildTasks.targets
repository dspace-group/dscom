<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Copyright 2022 dSPACE GmbH, Carsten Igel and Contributors

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <!-- Export settings. -->
  <PropertyGroup>
    <_DsComTaskAssemblyFile>$(MsBuildThisFileDirectory)_dscom\$(TargetFramework)\dSPACE.Runtime.InteropServices.BuildTasks.dll</_DsComTaskAssemblyFile>
    <_DsComExportTypeLibraryTargetFile>$(TargetDir)\$(TargetName)$(_DsComTlbExt)</_DsComExportTypeLibraryTargetFile>
    <_DsComExportTypeLibraryAssemblyFile>$(TargetPath)</_DsComExportTypeLibraryAssemblyFile>
  </PropertyGroup>

  <ItemGroup>
    <!-- Use target directory as reference path for assembly resolving during build -->
    <DsComTlbExportAssemblyPaths Include="$(TargetDir)" />
    <!-- Use source directory of reference files for assembly resolving during build -->
    <DsComTlbExportAssemblyPaths Include="%(Reference.Root)%(Reference.Directory)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Copy COMFileReferences to list -->
    <DsComTlbExportTlbReferences Include="@(COMFileReference)" />
  </ItemGroup>

  <!-- Embed task -->
  <UsingTask AssemblyFile="$(_DsComTaskAssemblyFile)" TaskName="dSPACE.Runtime.InteropServices.BuildTasks.TlbExport" />

  <!-- 
      Create a target to be called after the build has taken place. (Target assembly must exist).
      Call target only if target file has changed or resulting type library is missing.
  -->
  <Target Name="DsComExportTypeLibraryAfterBuild" 
          AfterTargets="AfterBuild" 
          Inputs="$(_DsComExportTypeLibraryAssemblyFile)"
          Outputs="$(_DsComExportTypeLibraryTargetFile)"
          Condition="'$(Platform)' == 'x64'">
    <TlbExport 
      TlbOverriddenId="$(DsComTypeLibraryUniqueId)"
      TargetFile="$(_DsComExportTypeLibraryTargetFile)"
      SourceAssemblyFile="$(_DsComExportTypeLibraryAssemblyFile)"
      TypeLibraryReferences="@(DsComTlbExportTlbReferences)"
      TypeLibraryReferencePaths="@(DsComTlbExportReferencePaths)"
      AssemblyPaths="@(DsComTlbExportAssemblyPaths)" />
  </Target>

  <!-- Target to optionally register type library -->
  <Target Name="DsComExportTypeLibraryAndRegisterAssembly" 
      DependsOnTargets="DsComExportTypeLibraryAfterBuild" 
      AfterTargets="AfterBuild"
      Condition="'$(DsComRegisterTypeLibrariesAfterBuild)' == 'true'" >
      <RegisterAssembly Assemblies="$(TargetPath)" />
  </Target>

  <!-- Target to optionally unregister type library. Should be called before removing. -->
  <Target Name="DsComExportTypeLibraryUnregisterAssembly" 
      Condition="'$(DsComRegisterTypeLibrariesAfterBuild)' == 'true'"
      BeforeTargets="BeforeBuild;BeforeRebuild;BeforeClean">
      <UnregisterAssembly Assemblies="$(TargetPath)" />
  </Target>

  <!-- Remove type library on clean -->
  <Target Name="DsComExportTypeLibraryBeforeClean" BeforeTargets="BeforeClean" DependsOnTargets="DsComExportTypeLibraryUnregisterAssembly">
    <Delete 
          Files="$(DsComExportTypeLibraryTargetFile)" 
          Condition="Exists('$(DsComExportTypeLibraryTargetFile)')" />
  </Target>
</Project>